dist: xenial

jobs:
  include:
    - stage: "Check"
      name: "Validate"
      sudo: required
      language: bash
      before_install:
      - sudo apt-get update
      - sudo apt-get install shellcheck -y
      script: find . -name "*.sh" -print0 |  xargs -0 -n1  shellcheck

    - stage: "Test"
      name: "test:pycodestyle:3.5"
      sudo: required
      language: python
      python:
       - "3.5"
      script:
      - pip3 freeze
      - python setup.py test
      - make lint

    - stage: "Test"
      name: "test:pycodestyle:3.6"
      sudo: required
      language: python
      python:
       - "3.6"
      script:
      - pip3 freeze
      - python setup.py test
      - make lint

    - stage: "Test"
      name: "test:pycodestyle:3.7"
      sudo: required
      language: python
      python:
       - "3.7"
      script:
      - pip3 freeze
      - python setup.py test
      - make lint

    - stage: "Test"
      name: "test:pylint:3.5"
      language: python
      python:
       - "3.5"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt || pylint-exit $?
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:pylint:3.6"
      language: python
      python:
       - "3.6"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt || pylint-exit $?
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:pylint:3.7"
      language: python
      python:
       - "3.7"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt || pylint-exit $?
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:unittest:3.5"
      language: python
      python:
      - "3.5"
      script:
      - pip3 freeze
      - python setup.py test --addopts --runslow

    - stage: "Test"
      name: "test:unittest:3.6"
      language: python
      python:
      - "3.6"
      script:
      - pip3 freeze
      - python setup.py test --addopts --runslow

    - stage: "Test"
      name: "test:unittest:3.7"
      language: python
      python:
      - "3.7"
      script:
      - pip3 freeze
      - python setup.py test --addopts --runslow

    - stage: e2e
      name: "docker - calico e2e Test"
      sudo: required
      language: python
      python:
        - "3.7"
      # ToDo implement multiple python versions?
      env:
        global:
          - KUBECONFIG=$HOME/.kube/config
          - KUBERNETES_VERSION=1.15.0

      before_install:
      # install dependent libraries
      - sudo apt-get update 
      - sudo apt-get install libseccomp2 wget -y
      # install docker, kubeadm, kubelet, kubectl
      - sudo apt-get update && sudo apt-get install -y docker.io apt-transport-https curl
      - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
      - sudo apt-get update
      - sudo apt-get install -y kubelet=${KUBERNETES_VERSION}-00 kubeadm=${KUBERNETES_VERSION}-00 kubectl=${KUBERNETES_VERSION}-00
      - sudo apt-mark hold kubelet kubeadm kubectl
      - sudo mkdir -p /etc/systemd/system/kubelet.service.d/
      - sudo kubeadm init --pod-network-cidr=10.244.0.0/16
      - mkdir -p $HOME/.kube
      - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      - sudo chown $(id -u):$(id -g) $HOME/.kube/config
      # setup calico
      - kubectl apply -f https://docs.projectcalico.org/v3.8/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
      - pip install -r requirements.txt
      - python setup.py install
      before_script:
      # wait for cluster to be available
      - until kubectl get nodes | grep " Ready"; do kubectl get nodes -o wide; done
      - kubectl taint nodes --all node-role.kubernetes.io/master-
      # create local registry
      - kubectl apply -f local_dev/docker-registry.yml
      # build and push image to local registry as soon as it is ready
      - docker build -t "localhost:5000/illuminatio-runner:dev" -f illuminatio-runner.dockerfile .
      - until docker push "localhost:5000/illuminatio-runner:dev"; do sleep 1; done

      script:
      # run illuminatio e2e tests
      - python setup.py test --addopts="-m e2e"

    - stage: e2e
      name: "containerd - calico e2e Tests"
      sudo: required
      language: python
      python:
        - "3.7"
      env:
        global:
          - KUBECONFIG=$HOME/.kube/config
          - CONTAINERD_VERSION=1.2.4
          - KUBERNETES_VERSION=1.15.0

      before_install:
      # install dependent libraries
      - sudo apt-get update 
      - sudo apt-get install libseccomp2 wget -y
      # download release tarball
      - wget https://storage.googleapis.com/cri-containerd-release/cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz
      - sha256sum cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz
      - curl https://storage.googleapis.com/cri-containerd-release/cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz.sha256
      # install containerd
      - sudo tar --no-overwrite-dir -C / -xzf cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz
      - sudo systemctl start containerd
      # install kubeadm, kubelet, kubectl
      - sudo apt-get update && sudo apt-get install -y docker.io apt-transport-https curl
      - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
      - sudo apt-get update
      - sudo apt-get install -y kubelet=${KUBERNETES_VERSION}-00 kubeadm=${KUBERNETES_VERSION}-00 kubectl=${KUBERNETES_VERSION}-00
      - sudo apt-mark hold kubelet kubeadm kubectl
      - sudo mkdir -p /etc/systemd/system/kubelet.service.d/
      # create systemd drop-in for containerd
      - sudo echo '[Service]' | sudo tee -a /etc/systemd/system/kubelet.service.d/0-containerd.conf
      - sudo echo 'Environment="KUBELET_EXTRA_ARGS=--container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock"' | sudo tee -a /etc/systemd/system/kubelet.service.d/0-containerd.conf
      - sudo systemctl daemon-reload
      - sudo systemctl restart containerd
      - sudo systemctl status containerd
      - sudo kubeadm init --cri-socket /run/containerd/containerd.sock --pod-network-cidr=10.244.0.0/16
      - mkdir -p $HOME/.kube
      - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      - sudo chown $(id -u):$(id -g) $HOME/.kube/config
      # setup calico
      - kubectl apply -f https://docs.projectcalico.org/v3.8/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
      - pip install -r requirements.txt
      - python setup.py install
      before_script:
      # wait for cluster to be available
      - until kubectl get nodes | grep " Ready"; do kubectl get nodes -o wide; done
      - kubectl taint nodes --all node-role.kubernetes.io/master-
      # create local registry
      - kubectl apply -f local_dev/docker-registry.yml
      # build and push image to local registry as soon as it is ready
      - docker build -t "localhost:5000/illuminatio-runner:dev" -f illuminatio-runner.dockerfile .
      - until docker push "localhost:5000/illuminatio-runner:dev"; do sleep 1; done

      script:
      # run illuminatio e2e tests
      - python setup.py test --addopts="-m e2e"
