dist: xenial

jobs:
  include:
    - stage: "Check"
      name: "Validate"
      sudo: required
      language: bash
      before_install:
      - sudo apt-get update
      - sudo apt-get install shellcheck -y
      script: find . -name "*.sh" -print0 |  xargs -0 -n1  shellcheck

    - stage: "Check"
      name: "Markdown Validate"
      language: ruby
      before_install:
      - gem install mdl
      script: mdl -r "~MD013" .

    - stage: "Test"
      name: "test:pycodestyle:3.6"
      sudo: required
      language: python
      python:
       - "3.6"
      script:
      - pip3 freeze
      - make lint

    - stage: "Test"
      name: "test:pycodestyle:3.7"
      sudo: required
      language: python
      python:
       - "3.7"
      script:
      - pip3 freeze
      - make lint

    - stage: "Test"
      name: "test:pylint:3.6"
      language: python
      python:
       - "3.6"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:pylint:3.7"
      language: python
      python:
       - "3.7"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:unittest:3.6"
      language: python
      python:
      - "3.6"
      script:
      - pip3 freeze
      - python setup.py test --addopts="-m 'not e2e' --runslow"

    - stage: "Test"
      name: "test:unittest:3.7"
      language: python
      python:
      - "3.7"
      before_script:
      - pip install codecov
      script:
      - pip3 freeze
      - python setup.py test --addopts="-m 'not e2e' --runslow"
      after_script:
      - codecov

    # TODO how to cleanup image later
    # merely build the image for untagged commits
    - stage: build
      name: "build images and push"
      sudo: required
      env:
        - IMAGE_REPO=inovex
      services:
        - docker
      script:
      - export IMAGE_TAG=${TRAVIS_BRANCH}
      # We could also use a different registry
      - if [[ "${TRAVIS_PULL_REQUEST}" != "false" ]]; then export IMAGE_TAG=${TRAVIS_PULL_REQUEST_BRANCH}; fi
      - if [[ "${IMAGE_TAG}" == "master" ]]; then export IMAGE_TAG=latest; fi
      - make image-build
      - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      - make image-push

    # merely build the python package for untagged commits
    - stage: build
      name: "build python package"
      if: (tag IS blank)
      language: python
      python:
        - "3.7"
      script:
      - python3 setup.py bdist_wheel

    # build and upload the tagged python package for tagged commits
    - stage: build
      name: "upload python package"
      if: (tag IS present)
      language: python
      python:
        - "3.7"
      script:
      - python setup.py bdist_wheel
      - pip install twine
      - twine upload -u "${PYPI_USERNAME}" -p "${PYPI_PASSWORD}" --repository-url https://upload.pypi.org/legacy/ dist/*

    - stage: e2e
      name: "docker - calico e2e Tests"
      sudo: required
      language: python
      python:
        - "3.7"
      # ToDo implement multiple python versions?
      env:
        - KUBECONFIG="$HOME/.kube/config"
        - KUBERNETES_VERSION=v1.15.3
        - MINIKUBE_VERSION=v1.3.1
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME

      before_script:
      # install dependent binaries
      - curl --fail -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl --fail -Lo minikube "https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64" && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - mkdir -p $HOME/.kube $HOME/.minikube
      - touch $KUBECONFIG
      - minikube config set vm-driver none
      - sudo -H -E ./local_dev/start_docker.sh
      - pip install -r requirements.txt
      - pip install codecov
      - python setup.py install

      script:
      # run illuminatio e2e tests
      - export E2E_RUNNER_IMAGE="${TRAVIS_REPO_SLUG}-runner:${TRAVIS_BRANCH}" python setup.py test --addopts="-m e2e"

      after_script:
      - codecov

    - stage: e2e
      name: "containerd - calico e2e Tests"
      sudo: required
      language: python
      python:
        - "3.7"
      env:
        - KUBERNETES_VERSION=v1.17.2
        - CALICO_VERSION=3.8

      before_script:
      # install dependent binaries
      - curl --fail -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-$(uname)-amd64
      - chmod +x ./kind
      - sudo mv ./kind /usr/local/bin/kind
      - sudo -H -E ./local_dev/start_containerd.sh
      - pip install -r requirements.txt
      - pip install codecov
      - python setup.py install

      script:
      # run illuminatio e2e tests
      - export E2E_RUNNER_IMAGE="${TRAVIS_REPO_SLUG}-runner:${TRAVIS_BRANCH}" python setup.py test --addopts="-m e2e"

      after_script:
      - codecov
