dist: bionic
os: linux
language: python

jobs:
  include:
    - stage: "Check"
      name: "Validate"
      language: shell
      before_install:
      - sudo apt-get update
      - sudo apt-get install shellcheck -y
      script: find . -name "*.sh" -print0 |  xargs -0 -n1  shellcheck

    - stage: "Check"
      name: "Markdown Validate"
      language: ruby
      before_install:
      - gem install mdl
      script: mdl -r "~MD013" .

    - stage: "Check"
      name: "Lint python files"
      language: python
      cache: pip
      python: "3.8"
      script:
      - make lint

    - stage: "Test"
      name: "test:unittest"
      language: python
      cache: pip
      python: "3.8"
      before_script:
      - pip install codecov
      - export PATH="${PATH}:$(pwd)"
      script:
      - coverage run --source=./src/illuminatio/ setup.py test --addopts="-m 'not e2e' --runslow"
      after_success:
      - codecov

    - stage: "Test"
      name: "docker - calico e2e Tests"
      language: python
      cache: pip
      python: "3.8"
      env:
      - KUBECONFIG="$HOME/.kube/config"
      # stable version in minikube v1.12.2
      - KUBERNETES_VERSION=v1.18.3
      - MINIKUBE_VERSION=v1.12.2
      - CHANGE_MINIKUBE_NONE_USER=true
      - MINIKUBE_WANTUPDATENOTIFICATION=false
      - MINIKUBE_WANTREPORTERRORPROMPT=false
      - MINIKUBE_HOME=$HOME

      before_script:
      # install dependent binaries
      - curl --fail -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl --fail -Lo minikube "https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64" && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - mkdir -p $HOME/.kube $HOME/.minikube
      - touch $KUBECONFIG
      - minikube config set driver docker
      - ./local_dev/start_docker.sh
      - pip install -r requirements.txt
      - pip install codecov
      - python setup.py install
      - sudo cp ${TRAVIS_BUILD_DIR}/nmap /usr/local/nmap

      script:
      # run illuminatio e2e tests
      - ./local_dev/run_e2e_tests.sh

      after_success:
      - codecov

    - stage: "Test"
      name: "containerd - calico e2e Tests"
      language: python
      cache: pip
      python: "3.8"
      env:
      - KUBECONFIG="$HOME/.kube/config"
      # stable version in minikube v1.12.2
      - KUBERNETES_VERSION=v1.18.3
      - MINIKUBE_VERSION=v1.12.2
      - CHANGE_MINIKUBE_NONE_USER=true
      - MINIKUBE_WANTUPDATENOTIFICATION=false
      - MINIKUBE_WANTREPORTERRORPROMPT=false
      - MINIKUBE_HOME=$HOME

      before_script:
      # install dependent binaries
      - curl --fail -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl --fail -Lo minikube "https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64" && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - mkdir -p $HOME/.kube $HOME/.minikube
      - touch $KUBECONFIG
      - minikube config set driver docker
      - ./local_dev/start_containerd.sh
      - pip install -r requirements.txt
      - pip install codecov
      - python setup.py install
      - sudo cp ${TRAVIS_BUILD_DIR}/nmap /usr/local/nmap

      script:
      # run illuminatio e2e tests
      - ./local_dev/run_e2e_tests.sh

      after_success:
      - codecov

    # merely build the image for untagged commits
    - stage: build
      name: "build images"
      if: (tag IS blank)
      services:
        - docker
      script:
      - docker build -t "${TRAVIS_REPO_SLUG}":latest .
      - docker tag "${TRAVIS_REPO_SLUG}":latest "${TRAVIS_REPO_SLUG}"-runner:latest

    # build and push the latest images for master commits
    - stage: build
      name: "push latest images"
      if: (branch = master AND NOT type = pull_request)
      services:
        - docker
      script:
      - docker build -t "${TRAVIS_REPO_SLUG}":latest .
      - docker tag "${TRAVIS_REPO_SLUG}":latest "${TRAVIS_REPO_SLUG}"-runner:latest
      - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      - docker push "${TRAVIS_REPO_SLUG}"-runner:latest
      - docker push "${TRAVIS_REPO_SLUG}":latest

    # build and push the tagged image for tagged commits
    - stage: build
      name: "push tagged images"
      if: (tag IS present)
      services:
        - docker
      script:
      - docker build -t "${TRAVIS_REPO_SLUG}":"${TRAVIS_TAG}" .
      - docker tag "${TRAVIS_REPO_SLUG}":"${TRAVIS_TAG}" "${TRAVIS_REPO_SLUG}"-runner:"${TRAVIS_TAG}"
      - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      - docker push "${TRAVIS_REPO_SLUG}"-runner:"${TRAVIS_TAG}"
      - docker push "${TRAVIS_REPO_SLUG}":"${TRAVIS_TAG}"

    # merely build the python package for untagged commits
    - stage: build
      name: "build python package"
      if: (tag IS blank)
      language: python
      cache: pip
      python: "3.8"
      script:
      - python3 setup.py bdist_wheel
      - pip install -e .
      - illuminatio --help

    # build and upload the tagged python package for tagged commits
    - stage: build
      name: "upload python package"
      if: (tag IS present)
      language: python
      cache: pip
      python: "3.8"
      script:
      - python setup.py bdist_wheel
      - pip install twine
      - twine upload -u "${PYPI_USERNAME}" -p "${PYPI_PASSWORD}" --repository-url https://upload.pypi.org/legacy/ dist/*
