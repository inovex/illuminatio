dist: xenial

jobs:
  include:
    - stage: "Check"
      name: "Validate"
      sudo: required
      language: bash
      before_install:
      - sudo apt-get update
      - sudo apt-get install shellcheck -y
      script: find . -name "*.sh" -print0 |  xargs -0 -n1  shellcheck

    - stage: "Test"
      name: "test:pycodestyle:3.5"
      sudo: required
      language: python
      python:
       - "3.5"
      script:
      - pip3 freeze
      - python setup.py test
      - make lint

    - stage: "Test"
      name: "test:pycodestyle:3.6"
      sudo: required
      language: python
      python:
       - "3.6"
      script:
      - pip3 freeze
      - python setup.py test
      - make lint

    - stage: "Test"
      name: "test:pycodestyle:3.7"
      sudo: required
      language: python
      python:
       - "3.7"
      script:
      - pip3 freeze
      - python setup.py test
      - make lint

    - stage: "Test"
      name: "test:pylint:3.5"
      language: python
      python:
       - "3.5"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt || pylint-exit $?
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:pylint:3.6"
      language: python
      python:
       - "3.6"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt || pylint-exit $?
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:pylint:3.7"
      language: python
      python:
       - "3.7"
      script:
      - pip3 install anybadge==1.1.1 pylint==2.3.0 pylint-exit==1.0.0
      - pip3 freeze
      - pylint --rcfile=.pylintrc --output-format=text src | tee pylint.txt || pylint-exit $?
      - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
      - echo "Pylint score was $score"
      - mkdir -p public
      - mv pylint.txt public/pylint.txt
      - anybadge --value=$score --file=public/pylint.svg pylint

    - stage: "Test"
      name: "test:unittest:3.5"
      language: python
      python:
      - "3.5"
      script:
      - pip3 freeze
      - python setup.py test --addopts --runslow

    - stage: "Test"
      name: "test:unittest:3.6"
      language: python
      python:
      - "3.6"
      script:
      - pip3 freeze
      - python setup.py test --addopts --runslow

    - stage: "Test"
      name: "test:unittest:3.7"
      language: python
      python:
      - "3.7"
      script:
      - pip3 freeze
      - python setup.py test --addopts --runslow

    - stage: e2e
      name: "docker - calico e2e Tests"
      sudo: required
      language: python
      python:
        - "3.7"
      # ToDo implement multiple python versions?
      env:
        - KUBECONFIG="$HOME/.kube/config"
        - KUBERNETES_VERSION=v1.15.3
        - MINIKUBE_VERSION=v1.3.1
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME

      before_script:
      # install dependent binaries
      - curl --fail -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl --fail -Lo minikube "https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64" && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - mkdir -p $HOME/.kube $HOME/.minikube
      - touch $KUBECONFIG
      - minikube config set vm-driver none
      - sudo -H -E ./local_dev/start_docker.sh
      - pip install -r requirements.txt
      - python setup.py install

      script:
      # run illuminatio e2e tests
      - ./local_dev/run_e2e_tests.sh

    - stage: e2e
      name: "containerd - calico e2e Tests"
      sudo: required
      language: python
      python:
        - "3.7"
      env:
        - CONTAINERD_VERSION=1.2.6
        - KUBECONFIG="$HOME/.kube/config"
        - KUBERNETES_VERSION=v1.15.3
        - MINIKUBE_VERSION=v1.3.1
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME

      before_install:
      # See: https://github.com/containerd/cri/blob/master/docs/installation.md
      - sudo apt-get update && sudo apt-get install libseccomp2 -y
      - curl --fail -sLO "https://storage.googleapis.com/cri-containerd-release/cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz"
      - sudo tar --no-overwrite-dir -C / -xzf cri-containerd-${CONTAINERD_VERSION}.linux-amd64.tar.gz

      before_script:
      # install dependent binaries
      - curl --fail -Lo kubectl "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - curl --fail -Lo minikube "https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64" && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - mkdir -p $HOME/.kube $HOME/.minikube
      - touch $KUBECONFIG
      - minikube config set vm-driver none
      - sudo -H -E ./local_dev/start_containerd.sh
      - pip install -r requirements.txt
      - python setup.py install

      script:
      # run illuminatio e2e tests
      - ./local_dev/run_e2e_tests.sh

    # merely build the image for untagged commits
    - stage: build
      name: "build image"
      if: (tag IS blank)
      sudo: required
      services:
        - docker
      script:
      - docker build -t "${TRAVIS_REPO_SLUG}"-runner:latest -f illuminatio-runner.dockerfile .

    # build and push the latest image for master commits
    - stage: build
      name: "push latest image"
      if: (branch = master AND NOT type = pull_request)
      sudo: required
      services:
        - docker
      script:
      - docker build -t "${TRAVIS_REPO_SLUG}"-runner:latest -f illuminatio-runner.dockerfile .
      - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      - docker push "${TRAVIS_REPO_SLUG}"-runner:latest

    # build and push the tagged image for tagged commits
    - stage: build
      name: "push tagged image"
      if: (tag IS present)
      sudo: required
      services:
        - docker
      script:
      - docker build -t "${TRAVIS_REPO_SLUG}"-runner:"${TRAVIS_TAG}" -f illuminatio-runner.dockerfile .
      - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      - docker push "${TRAVIS_REPO_SLUG}"-runner:"${TRAVIS_TAG}"

    # merely build the python package for untagged commits
    - stage: build
      name: "build python package"
      if: (tag IS blank)
      language: python
      python:
        - "3.7"
      script:
      - python3 setup.py bdist_wheel

    # build and upload the tagged python package for tagged commits
    - stage: build
      name: "upload python package"
      if: (tag IS present)
      language: python
      python:
        - "3.7"
      script:
      - python setup.py bdist_wheel
      - pip install twine
      - twine upload -u "${PYPI_USERNAME}" -p "${PYPI_PASSWORD}" --repository-url https://upload.pypi.org/legacy/ dist/*
