apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: illuminatio-runner
    illuminatio-cleanup: on-request
    illuminatio-role: ds_runner-set
  name: {name}
  namespace: {namespace}
spec:
  selector:
    matchLabels:
      illuminatio-role: ds_runner
  template:
    metadata:
      labels:
        illuminatio-cleanup: on-request
        illuminatio-role: ds_runner
    spec:
      containers:
      - env:
        - name: RUNNER_MODE
          value: daemon
        - name: RUNNER_NODE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: RUNNER_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: RUNNER_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CONTAINER_RUNTIME_NAME
          value: {runtime}
        - name: CONTAINER_RUNTIME_ENDPOINT
          value: {cri_socket}
        args:
        - --verbosity={log_level}
        image: {image}
        imagePullPolicy: Always
        name: runner
        securityContext:
          allowPrivilegeEscalation: true
          procMount: Default
          runAsUser: 0
          capabilities:
            add:
              - SYS_ADMIN
        volumeMounts:
        - mountPath: /etc/config/
          name: cases-volume
        - mountPath: {cri_socket}
          name: cri-socket
          readOnly: true
        - mountPath: {netns_path}
          name: net-ns
          readOnly: true
      dnsPolicy: ClusterFirst
      hostPID: true
      serviceAccount: {service_account_name}
      terminationGracePeriodSeconds: 30
      # TODO can we add here liveness and readiness checks?
      volumes:
      - name: cases-volume
        configMap:
          defaultMode: 420
          name: {config_map_name}
      - name: cri-socket
        hostPath:
          path: {cri_socket}
          type: Socket
      - name: net-ns
        hostPath:
          path: {netns_path}
          type: Directory
